# Generated by Django 5.2.5 on 2025-09-12 08:00

import django.db.models.deletion
import django.utils.timezone
import tracker.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brand_logos/')),
                ('website', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='idx_brand_name'), models.Index(fields=['is_active'], name='idx_brand_active')],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(editable=False, max_length=32, unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='General notes about the customer (deprecated, use CustomerNote model instead)', null=True)),
                ('customer_type', models.CharField(blank=True, choices=[('government', 'Government'), ('ngo', 'NGO'), ('company', 'Private Company'), ('personal', 'Personal'), ('bodaboda', 'Bodaboda')], max_length=20, null=True)),
                ('organization_name', models.CharField(blank=True, max_length=255, null=True)),
                ('tax_number', models.CharField(blank=True, max_length=64, null=True)),
                ('personal_subtype', models.CharField(blank=True, choices=[('owner', 'Owner'), ('driver', 'Driver')], max_length=16, null=True)),
                ('registration_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('arrival_time', models.DateTimeField(blank=True, null=True)),
                ('current_status', models.CharField(choices=[('arrived', 'Arrived'), ('in_service', 'In Service'), ('completed', 'Completed'), ('departed', 'Departed')], default='arrived', max_length=20)),
                ('total_visits', models.PositiveIntegerField(default=0)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('last_visit', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'indexes': [models.Index(fields=['full_name'], name='idx_cust_name'), models.Index(fields=['phone'], name='idx_cust_phone'), models.Index(fields=['email'], name='idx_cust_email'), models.Index(fields=['registration_date'], name='idx_cust_reg'), models.Index(fields=['last_visit'], name='idx_cust_lastvisit'), models.Index(fields=['customer_type'], name='idx_cust_type')],
                'constraints': [models.UniqueConstraint(fields=('full_name', 'phone', 'organization_name', 'tax_number'), name='uniq_customer_identity')],
            },
        ),
        migrations.CreateModel(
            name='CustomerNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notes_created', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes_history', to='tracker.customer')),
            ],
            options={
                'verbose_name': 'Customer Note',
                'verbose_name_plural': 'Customer Notes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to=tracker.models.user_avatar_path)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate_number', models.CharField(max_length=32)),
                ('make', models.CharField(blank=True, max_length=64, null=True)),
                ('model', models.CharField(blank=True, max_length=64, null=True)),
                ('vehicle_type', models.CharField(blank=True, max_length=64, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='tracker.customer')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(editable=False, max_length=32, unique=True)),
                ('type', models.CharField(choices=[('service', 'Service'), ('sales', 'Sales'), ('consultation', 'Consultation')], max_length=16)),
                ('status', models.CharField(choices=[('created', 'Created'), ('assigned', 'Assigned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='created', max_length=16)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=16)),
                ('description', models.TextField(blank=True, null=True)),
                ('estimated_duration', models.PositiveIntegerField(blank=True, help_text='Minutes', null=True)),
                ('actual_duration', models.PositiveIntegerField(blank=True, null=True)),
                ('item_name', models.CharField(blank=True, max_length=64, null=True)),
                ('brand', models.CharField(blank=True, max_length=64, null=True)),
                ('quantity', models.PositiveIntegerField(blank=True, null=True)),
                ('tire_type', models.CharField(blank=True, max_length=32, null=True)),
                ('inquiry_type', models.CharField(blank=True, max_length=64, null=True)),
                ('questions', models.TextField(blank=True, null=True)),
                ('contact_preference', models.CharField(blank=True, max_length=16, null=True)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('assigned_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_orders', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='tracker.customer')),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='tracker.vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True, null=True)),
                ('quantity', models.PositiveIntegerField(default=0, help_text='Current stock quantity')),
                ('price', models.DecimalField(decimal_places=2, default=0, help_text='Selling price per unit', max_digits=10)),
                ('cost_price', models.DecimalField(decimal_places=2, default=0, help_text='Purchase cost per unit', max_digits=10)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit', max_length=64, null=True, unique=True)),
                ('barcode', models.CharField(blank=True, help_text='Barcode (UPC, EAN, etc.)', max_length=64, null=True)),
                ('reorder_level', models.PositiveIntegerField(default=5, help_text='Quantity at which to reorder')),
                ('location', models.CharField(blank=True, help_text='Storage location in warehouse', max_length=64, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this item currently available for sale?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(help_text='Product brand', on_delete=django.db.models.deletion.PROTECT, related_name='items', to='tracker.brand')),
            ],
            options={
                'ordering': ['brand__name', 'name'],
                'indexes': [models.Index(fields=['name'], name='idx_item_name'), models.Index(fields=['brand'], name='idx_item_brand'), models.Index(fields=['name', 'brand'], name='idx_item_name_brand'), models.Index(fields=['created_at'], name='idx_item_created'), models.Index(fields=['sku'], name='idx_item_sku'), models.Index(fields=['barcode'], name='idx_item_barcode')],
                'unique_together': {('name', 'brand')},
            },
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['customer'], name='idx_vehicle_customer'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['plate_number'], name='idx_vehicle_plate'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status'], name='idx_order_status'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['type'], name='idx_order_type'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['priority'], name='idx_order_priority'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='idx_order_created'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['completed_at'], name='idx_order_completed'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['customer', 'created_at'], name='idx_order_cust_created'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['type', 'status'], name='idx_order_type_status'),
        ),
    ]
